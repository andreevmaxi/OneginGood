/*!
* @mainpage
* This is program that sorts texts
*/

/*!
* \file main.cpp
*/

#include <cstdio>
#include <cstdlib>

#ifdef _DEBUG
    #define ASSERT( cond )                                                                                                 \
    {                                                                                                                      \
        if (!(cond))                                                                                                       \
        {                                                                                                                  \
            printf("Ass failed: %s, file: %s,\n"                                                                           \
                   "line: %d, function %s:\n", #cond, __FILE__, __LINE__, __PRETTY_FUNCTION__);                            \
            abort();                                                                                                       \
        }                                                                                                                  \
    }

    #define DPRINT printf
#else
    #define ASSERT( cond ) ;
    #define DPRINT if(0) printf
#endif

/**
    \brief FileSizeWin
    \author andreevmaxi
	\version 1.0
	\date september 2019 year
	\copyright korobcom
    \details This is function that finds out a size of windows file without '\r'
    \return number of chars symbols in file
    \param[in] f pointer on binar reading file
*/

int FileSizeWin(FILE* f);

/**
    \brief FileRead
    \author andreevmaxi
	\version 1.0
	\date september 2019 year
	\copyright korobcom
    \details This is function that reads symbols of windows file without '\r'
    \return 1 if everything is good
    \param[in] fp pointer on binar reading file
    \param[in,out] buff pointer on first part of memory saved for text
*/

bool FileRead(char* buff, FILE* fp);

/**
    \brief StrDivide
    \author andreevmaxi
	\version 1.0
	\date september 2019 year
	\copyright korobcom
    \details This is function that divides buffer array of chars on array of pointer on begin of every string and on array of pointer on end of every string
    \return 1 if everything is good
    \param[in] buff pointer on first part of memory saved for text
    \param[out] text pointer on array of pointers on begin of string
    \param[out] rtext pointer on array of pointers on end of string
    \param[in] CharNum pointer on int variable of size of buffer
    \param[in] StrNum pointer on int variable of number of strings
*/

bool StrDivide(char* buff, char** text, char** rtext, int* CharNum, int* StrNum);

/**
    \brief ComparatorStr
    \author andreevmaxi
	\version 1.0
	\date september 2019 year
	\copyright korobcom
    \details This is function that compares two strings
    \return 1 if first string is less than second and 0 if second string is less or equal to first
    \param[in] str1 pointer on first char of comparing first string
    \param[in] str2 pointer on first char of comparing second string
*/

bool ComparatorStr(const void* str1, const void* str2);

/**
    \brief PrintText
    \author andreevmaxi
	\version 1.0
	\date september 2019 year
	\copyright korobcom
    \details This is function prints text to file from array of pointers to char
    \return 1 if everything procided good
    \param[in] text pointer on array of pointers of chars
    \param[in] f pointer writing file
    \param[in] NumStr number of writing strings
*/

bool PrintText(char** text, FILE* f, int NumStr);

/**
    \brief SpeedStrSort
    \author andreevmaxi
	\version 1.0
	\date september 2019 year
	\copyright korobcom
    \details This is function that sorts array of pointers on chars
    \return 1 if everything procided good
    \param[in,out] text pointer on array of pointers of chars
    \param[in] first number of begin index of sorting array
    \param[in] second number of end index of sorting array
    \param[in] cmp pointer on comparator function
*/

bool SpeedStrSort(char** text, int first, int second, bool (*cmp)(const void*, const void*));

/**
    \brief ReverseComparatorStr
    \author andreevmaxi
	\version 1.0
	\date september 2019 year
	\copyright korobcom
    \details This is function that compares two strings by the end
    \return 1 if first string is less than second and 0 if second string is less or equal to first
    \param[in] str1 pointer on first char of comparing first string
    \param[in] str2 pointer on first char of comparing second string
*/

bool ReverseComparatorStr(const void* str1, const void* str2);

/**
    \brief ReverseStrPointer
    \author andreevmaxi
	\version 1.0
	\date september 2019 year
	\copyright korobcom
    \details This is function that puts pointers on end of strings in array of pointers
    \return 1 if everything procided good
    \param[in] str pointer on end of putting string
    \param[in,out] rtext pointer on array of pointers of chars
    \param[in] StrNow index of putting string
*/

bool ReverseStrPointer(char* str, char** rtext, int StrNow);

/**
    \brief NormalizeReverseText
    \author andreevmaxi
	\version 1.0
	\date september 2019 year
	\copyright korobcom
    \details This is function that in array of pointers on end of strings change on pointers of begin of strings
    \return 1 if everything procided good
    \param[in,out] text pointer on array of pointers of chars
    \param[in] first pointer on begin of reserved memory
    \param[in] StrNum number of strings in text
*/

bool NormalizeReverseText(char** text, char* first, int StrNum);

/**
    \brief OriginalPrint
    \author andreevmaxi
	\version 1.0
	\date september 2019 year
	\copyright korobcom
    \details This is function that prints in file array of chars
    \return 1 if everything procided good
    \param[in] buff pointer on first char of saved memory
    \param[in] f pointer on file that used for print in
    \param[in] StrNum number of strings in text
*/

bool OriginalPrint(char* buff, FILE* f, int StrNum);

/**
    \brief ChangeEnterOnEndOfString
    \author andreevmaxi
	\version 1.0
	\date september 2019 year
	\copyright korobcom
    \details This is function that change '\n' on '\0' in buffer and counts number of strings
    \return 1 if everything procided good
    \param[in] BuffTmp pointer on first char of saved memory
    \param[in] StrNum pointer on number of strings in saved memory
    \param[in] CharSize number on chars in saved memory
*/

bool ChangeEnterOnEndOfString(char* BuffTmp, int* StrNum, int CharSize);

/**
    \brief DivideInQSort
    \author andreevmaxi
	\version 1.0
	\date september 2019 year
	\copyright korobcom
    \details This is function that used in SppeeeedStrSort
    \return right ending of sorting array
    \param[in,out] text pointer on array of pointers of chars
    \param[in] first number of begin index of sorting array
    \param[in] second number of end index of sorting array
    \param[in] cmp pointer on comparator function
*/

int DivideInQSort(char** text, int first, int second, bool (*cmp)(const void*, const void*));

int main(int argc, char **argv)
{
    char  FileReadName[50] = {};
    char FileWriteName[50] = {};

    scanf("%s",  &FileReadName);
    scanf("%s", &FileWriteName);

    FILE* f = fopen(FileReadName, "rb");

    int CharSize = FileSizeWin(f);

    char* buffer = (char*)calloc ( (CharSize + 2), sizeof(char));
    ASSERT (buffer != NULL);

    *buffer = '\0';
    ++buffer;

    FileRead(buffer, f);

    int StrNum = 0;

    ChangeEnterOnEndOfString(buffer, &StrNum, CharSize);

    char* text[StrNum];
    char* rtext[StrNum];

    StrDivide(buffer, text, rtext, &CharSize, &StrNum);

    fclose(f);

    SpeedStrSort( text, 0, StrNum-1, ComparatorStr);
    SpeedStrSort(rtext, 0, StrNum-1, ReverseComparatorStr);
    f = fopen(FileWriteName, "w+");

    fprintf(f,"Dictionary of english life:\n");
    PrintText(text, f, StrNum);
    fprintf(f,"\n\nReverse Array Pointers (RAP) Dictionary:\n");
    NormalizeReverseText(rtext, buffer, StrNum);
    PrintText(rtext, f, StrNum);
    fprintf(f,"\n\nOriginal:\n");
    OriginalPrint(buffer, f, StrNum);

    fclose(f);
    free(buffer);

    return 0;
}

bool SpeedStrSort(char** text, int first, int second, bool (*cmp)(const void*, const void*))
{
    ASSERT(text != NULL);
    ASSERT(cmp != NULL);

    int NowStr = second;
    int i = first;
    int  left = 0;
    int right = 0;

    if(first < second)
    {
        right = DivideInQSort(text, first, second, cmp) + 1;
        left  = right - 1;

        SpeedStrSort(text, first, left, cmp);
        SpeedStrSort(text, right, second, cmp);
    }
    return 1;
}

bool FileRead(char* buff, FILE* fp)
{
    ASSERT (buff != NULL);
    ASSERT (fp != NULL);

    char* LastChar = buff;
    char tmp  = '\0';
    char prev = '\n';

    while ( (tmp = getc (fp)) != EOF )
    {
        if(tmp != '\r')
        {
            if (!(tmp == prev && tmp == '\n'))
            {
                *LastChar = tmp;
                prev = tmp;
                ++LastChar;
            }

        }
    }
    if(*(LastChar - 1) == '\0')
    {
        *(LastChar - 1) = '\n';
        *(LastChar) = *"maxim the great";
    }  else if(*(LastChar - 1) != '\n')
    {
        *(LastChar) = '\n';
    }

    return 1;
}

bool StrDivide(char* buff, char** text, char** rtext, int* CharNum, int* StrNum)
{
    ASSERT (buff != NULL);
    ASSERT (text != NULL);

    int NowStr = 1;
    text[0] = buff;
    for (int i = 1;i < *CharNum; ++i)
    {
        if( *(buff + i) == '\0' && *StrNum > NowStr)
        {
            text[NowStr] = buff + i + 1;
            ReverseStrPointer((char*)(buff + i - 1), rtext, (NowStr - 1) );
            ++NowStr;
        }
    }
    if (*(buff + *CharNum - 1) != '\0')
    {
        ReverseStrPointer((char*)(buff + *CharNum - 1), rtext, (*StrNum - 1) );
    } else
    {
        ReverseStrPointer((char*)(buff + *CharNum - 2), rtext, (*StrNum - 1) );
    }

    return 1;
}

bool ComparatorStr(const void* str1, const void* str2)
{
    ASSERT((char*)str1 != NULL);
    ASSERT((char*)str2 != NULL);

    int NowPos1 = 0;
    int NowPos2 = 0;

    while(*((char*)str1 + NowPos1 + 1) == ' ')
    {
        ++NowPos1;
    }
    while(*((char*)str2 + NowPos2 + 1) == ' ')
    {
        ++NowPos2;
    }

    while( ( *((char*)str1 + NowPos1)     ==         *((char*)str2 + NowPos2) ) &&
           ( *((char*)str1 + NowPos1 + 1) != '\0' && *((char*)str2 + NowPos2 + 1) != '\0') )
    {
        while(*((char*)str1 + NowPos1 + 1) == ' ')
        {
            ++NowPos1;
        }
        while(*((char*)str2 + NowPos2 + 1) == ' ')
        {
            ++NowPos2;
        }
        ++NowPos1;
        ++NowPos2;
    }

    if ( *((char*)str1 + NowPos1) == *((char*)str2 + NowPos2) )
    {
        if (*((char*)str1 + NowPos1 + 1) == '\0' && *((char*)str2 + NowPos2 + 1) == '\0')
        {
            return NowPos1 < NowPos2;
        }
        if (*((char*)str1 + NowPos1 + 1) == '\0')
        {
            return 1;
        }
        if (*((char*)str2 + NowPos2 + 1) == '\0')
        {
            return 0;
        }
    }

    return *((char*)str1 + NowPos1) < *((char*)str2 + NowPos2);
}

bool PrintText(char** text, FILE* f, int NumStr)
{
    ASSERT(text != NULL);
    ASSERT(f != NULL);

    int tmp = 0;
    int NowStr = 0;

    while (NowStr < NumStr)
    {

        fprintf(f,"%s", (text[NowStr]));
        ++NowStr;
        fprintf(f,"\n");
    }

    return 1;
}

bool ReverseComparatorStr(const void* str1, const void* str2)
{
    ASSERT((char*)str1 != NULL);
    ASSERT((char*)str2 != NULL);

    int NowPos1 = 0;
    int NowPos2 = 0;

    if(( *((char*)str1 - NowPos1) == *((char*)str2 - NowPos2) ))
    {
        while(*((char*)str1 - (NowPos1 + 1) ) == ' ')
        {
            ++NowPos1;
        }
        while(*((char*)str2 - (NowPos2 + 1) ) == ' ')
        {
            ++NowPos2;
        }
    }

    while( ( *((char*)str1 - NowPos1) == *((char*)str2 - NowPos2) ) && (*((char*)str1 - (NowPos1 + 1) ) != '\0' && *((char*)str2 - (NowPos2 + 1) ) != '\0') )
    {
        while(*((char*)str1 - (NowPos1 + 1) ) == ' ')
        {
            ++NowPos1;
        }
        while(*((char*)str2 - (NowPos2 + 1) ) == ' ')
        {
            ++NowPos2;
        }
        ++NowPos1;
        ++NowPos2;
    }

    if (  *((char*)str1 - NowPos1) == *((char*)str2 - NowPos2) )
    {
        if ( (*((char*)str1 - (NowPos1 + 1) ) == '\0') && *((char*)str2 - (NowPos2 + 1) ) == '\0')
        {
            return NowPos1 < NowPos2;
        }
        if (*((char*)str1 - (NowPos1 + 1) ) == '\0')
        {
            return 1;
        }
        if (*((char*)str2 - (NowPos2 + 1) ) == '\0')
        {
            return 0;
        }
    }

    return *((char*)str1 - NowPos1) < *((char*)str2 - NowPos2);
}

bool ReverseStrPointer(char* str, char** rtext, int StrNow)
{
    ASSERT(str != NULL);
    ASSERT(rtext != NULL);

    rtext[StrNow] = str;

    return 1;
}

bool NormalizeReverseText(char** text, char* first, int StrNum)
{
    ASSERT(text != NULL);
    ASSERT(first != NULL);

    for (int i = 0; i < StrNum; ++i)
    {
        while ( (text[i]) != first && *(text[i] - 1) != '\0')
        {
            --text[i];
        }
    }
    return 1;
}

bool OriginalPrint(char* buff, FILE* f, int StrNum)
{
    ASSERT(f != NULL);
    ASSERT(buff != NULL);

    char* tmp = buff;
    int i = 0;
    while (i < StrNum)
    {
        fprintf(f, "%c", *tmp);
        ++tmp;

        if(*tmp == '\0' || *tmp == '\n')
        {
            ++i;
            fprintf(f, "\n");
            ++tmp;
        }
    }
    return 1;
}

int FileSizeWin(FILE* f)
{
    ASSERT(f != NULL);

    char tmp, prev;
    int StrSize = 0;
    tmp = {};
    prev = {};

    tmp = (char)fgetc(f);
    while((tmp != EOF))
    {
        if(tmp != '\r')
        {
            if (!(tmp == prev && tmp == '\n'))
            {
                ++StrSize;
                prev = tmp;
            }
        }
        tmp = (char)fgetc(f);
    }
    rewind(f);

    return StrSize;
}

bool ChangeEnterOnEndOfString(char* BuffTmp, int* StrNum, int CharSize)
{
    ASSERT(StrNum != NULL);
    ASSERT(BuffTmp != NULL);

    for (int i = 0; i < CharSize + 1; ++i)
    {
        if(*BuffTmp == '\n')
        {
            *BuffTmp = '\0';
            ++(*StrNum);
        }
        ++BuffTmp;
    }

    return 1;
}

int DivideInQSort(char** text, int first, int second, bool (*cmp)(const void*, const void*))
{
    ASSERT(text != NULL);
    ASSERT(cmp != NULL);

    char* SupportStr = text[ (first + second) / 2 ];
    char* tmp = {};

    --first;
    ++second;

    while (first < second)
    {
        ++first;
        while(cmp(text[first], SupportStr))
        {
            ++first;
        }

        --second;
        while(cmp(SupportStr, text[second]))
        {
            --second;
        }
        if(first < second)
        {
            return s
        }
        printf("%d %d\n", first, second);
        tmp = text[first];
        text[first] = text[second];
        text[second] = tmp;
    }
    return second;
}
